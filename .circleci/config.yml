# CircleCI configuration file
version: 2.1

# orbs:
#   aws-ecr: circleci/aws-ecr@9.0.1

jobs:
  lint-frontend:
    docker:
      - image: cimg/node:21.4.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-dependencies-{{ checksum "frontend/package.json" }}
      - run:
          name: Install Frontend Dependencies
          command: |
            cd frontend
            npm install
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-dependencies-{{ checksum "frontend/package.json" }}
      - run: 
          name: Lint Frontend
          command: |
            cd frontend
            npm run lint
  lint-backend:
    docker:
      - image: cimg/node:21.4.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-dependencies-{{ checksum "backend/package.json" }}
      - run:
          name: Install Frontend Dependencies
          command: |
            cd backend
            npm install
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-dependencies-{{ checksum "backend/package.json" }}
      - run: 
          name: Lint Backend
          command: |
            cd backend
            npm run lint
  build-and-push-images:
    docker:
      - image: cimg/aws:2023.12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Authenticate Docker to ECR
          command: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/v0y6x1v6
      - run:
          name: Build and Push Backend Image
          command: |
            cd backend
            docker build -t backend .
            docker tag backend:latest public.ecr.aws/v0y6x1v6/backend:1.0      
            docker push public.ecr.aws/v0y6x1v6/backend:1.0           
      - run:
          name: Build and Push Frontend Image
          command: |
            cd frontend
            docker build -t frontend .
            docker tag frontend:latest public.ecr.aws/v0y6x1v6/frontend:latest
            docker push public.ecr.aws/v0y6x1v6/frontend:1.0
  # create-eks-cluster:
  #   docker:
  #     - image: ubuntu:latest # Replace with the desired Terraform version
  #   working_directory: tf-file
  #   steps:
  #     - checkout
  #     - setup_remote_docker:
  #         docker_layer_caching: false
  #     - run:
  #         name: Update apt package
  #         command: |
  #           apt-get update -y
  #     # Install AWS CLI (if not present in the Terraform image)
  #     - run:
  #         name: Install AWS CLI
  #         command: |
  #           apt-get update -y
  #           apt-get install -y python3-pip
  #           pip3 install --upgrade pip
  #           pip3 install awscli
  #     - run:
  #         name: Install Git
  #         command: |
  #           apt-get update -y
  #           apt-get install -y git
  #     - run:
  #         name: Install Prerequisites
  #         command: |
  #           apt-get update && apt-get install -y unzip wget
  #     # Download and install Terraform
  #     - run:
  #         name: Install Terraform
  #         command: |
  #           wget https://releases.hashicorp.com/terraform/1.0.0/terraform_1.0.0_linux_amd64.zip
  #           unzip terraform_1.0.0_linux_amd64.zip
  #           mv terraform /usr/local/bin/
  #     # Initialize Terraform
  #     - run:
  #         name: Terraform Init
  #         command: |
  #           cd tf-file
  #           terraform init
  #     # Apply Terraform changes to create EKS cluster
  #     - run:
  #         name: Terraform Plan
  #         command: |
  #           cd tf-file
  #           terraform plan 


workflows:
  default:
    jobs:
      - lint-frontend
      - lint-backend
      - build-and-push-images
      # - create-eks-cluster
