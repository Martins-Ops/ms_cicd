# CircleCI configuration file
version: 2.1

jobs:
  lint-frontend:
    docker:
      - image: cimg/node:21.4.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-dependencies-{{ checksum "frontend/package.json" }}
      - run:
          name: Install Frontend Dependencies
          command: |
            cd client
            npm install
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-dependencies-{{ checksum "client/package.json" }}
      - run: 
          name: Lint Frontend
          command: |
            cd client
            npm run lint
  lint-backend:
    docker:
      - image: cimg/node:21.4.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-dependencies-{{ checksum "backend/package.json" }}
      - run:
          name: Install Frontend Dependencies
          command: |
            cd backend
            npm install
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-dependencies-{{ checksum "backend/package.json" }}
      - run: 
          name: Lint Backend
          command: |
            cd backend
            npm run lint
  build-and-push-images:
    docker:
      - image: cimg/aws:2023.12
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Authenticate Docker to ECR
          command: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/v0y6x1v6
      - run:
          name: Build and Push Backend Image
          command: |
            cd backend
            docker build -t backend .
            docker tag backend:latest public.ecr.aws/v0y6x1v6/backend:1.0
            docker push public.ecr.aws/v0y6x1v6/backend:1.0        
      - run:
          name: Build and Push Frontend Image
          command: |
            cd client
            docker build -t frontend .
            docker tag frontend:latest public.ecr.aws/v0y6x1v6/frontend:2.0
            docker push public.ecr.aws/v0y6x1v6/frontend:2.0
  deploy-to-eks:
    docker:
      - image: ubuntu:latest 
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Update apt package
          command: |
            apt-get update -y
      # Install AWS CLI (if not present in the Terraform image)
      - run:
          name: Install AWS CLI
          command: |
            apt-get update -y
            apt-get install -y python3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Install Kubectl
          command: |
            apt-get update -y
            apt upgrade -y
            apt install curl -y
            curl --version
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl

      - run:
          name: Configure AWS and kubectl
          command: |
             aws eks --region $AWS_DEFAULT_REGION update-kubeconfig \
                --name ms-eks-q7iD9YwB                    
      - run: 
          name: Deploy K8s
          command: |       
             cd k8-file
             kubectl apply -f .
      - run:
          name: Wait for 5 minutes to perform rolling update
          command: |
             echo "Waiting for 5 minutes..."
             sleep 300
      - run: 
          name: Rolling Update K8s Deployment to a Newer Version
          command: |       
             cd k8-file
             # Update the image in the deployment
             kubectl set image deployment/frontend-deployment  frontend=public.ecr.aws/v0y6x1v6/frontend:2.0
             kubectl rollout status deployment/frontend-deployment
        
workflows:
  default:
    jobs:
      - lint-frontend
      - lint-backend
      - build-and-push-images:
          requires: [lint-frontend,lint-backend]
      - deploy-to-eks:
           requires:
            - build-and-push-images
